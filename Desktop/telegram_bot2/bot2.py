import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime
import pytz
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = "8306438881:AAEFg_MpnXk_iY2zHA5cGJomFv_kVAygbLk"
ADMIN_CHAT_ID = 5612586446

# –£—Å—Ç–∞–Ω–æ–≤–∏–º —É–∑–±–µ–∫—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (Asia/Tashkent)
UZBEK_TZ = pytz.timezone('Asia/Tashkent')

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç")],
        [KeyboardButton(text="üìå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")]
    ],
    resize_keyboard=True
)

# FSM
class Form(StatesGroup):
    waiting_for_name = State()
    waiting_for_report = State()
    waiting_for_reminder_date = State()
    waiting_for_reminder_time = State()
    waiting_for_reminder_text = State()
    editing_date = State()
    editing_time = State()
    editing_text = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ
user_names = {}
reminders = []  # –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç: {"user_id": int, "datetime": datetime, "text": str, "id": int}

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä ID –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
next_reminder_id = 1

# --- –°—Ç–∞—Ä—Ç ---
@dp.message(F.text == "/start")
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç!\n–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç—á—ë—Ç–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:")
    await state.set_state(Form.waiting_for_name)

@dp.message(Form.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    user_names[message.from_user.id] = message.text.strip()
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {user_names[message.from_user.id]}! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç—ã üëá", reply_markup=main_kb)
    await state.clear()

# --- –û—Ç—á–µ—Ç—ã ---
@dp.message(F.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç")
async def send_report(message: types.Message, state: FSMContext):
    if message.from_user.id not in user_names:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
        
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –æ—Ç—á—ë—Ç –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:")
    await state.set_state(Form.waiting_for_report)

@dp.message(Form.waiting_for_report)
async def forward_report(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in user_names:
        await message.answer("–û—à–∏–±–∫–∞: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start")
        await state.clear()
        return
        
    name = user_names[user_id]
    
    try:
        if message.text:
            report_text = f"üìã –û—Ç—á–µ—Ç –æ—Ç {name}\n\n{message.text}"
            await bot.send_message(chat_id=ADMIN_CHAT_ID, text=report_text)
            await message.answer("‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=main_kb)
            
        elif message.photo:
            caption = f"üì∑ –§–æ—Ç–æ-–æ—Ç—á–µ—Ç –æ—Ç {name}"
            if message.caption:
                caption += f"\n\n{message.caption}"
                
            await bot.send_photo(
                chat_id=ADMIN_CHAT_ID,
                photo=message.photo[-1].file_id,
                caption=caption
            )
            await message.answer("‚úÖ –§–æ—Ç–æ-–æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=main_kb)
            
        elif message.document:
            caption = f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç-–æ—Ç—á–µ—Ç –æ—Ç {name}"
            if message.caption:
                caption += f"\n\n{message.caption}"
                
            await bot.send_document(
                chat_id=ADMIN_CHAT_ID,
                document=message.document.file_id,
                caption=caption
            )
            await message.answer("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç-–æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=main_kb)
            
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç")
            return
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    await state.clear()

# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
@dp.message(F.text == "üìå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def set_reminder_date(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-08-20):")
    await state.set_state(Form.waiting_for_reminder_date)

@dp.message(Form.waiting_for_reminder_date)
async def set_reminder_time(message: types.Message, state: FSMContext):
    try:
        date_str = message.text.strip()
        date = datetime.strptime(date_str, "%Y-%m-%d").date()
        today = datetime.now(UZBEK_TZ).date()
        
        if date < today:
            await message.answer("–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
            return
            
        await state.update_data(reminder_date=date)
        await message.answer("–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):")
        await state.set_state(Form.waiting_for_reminder_time)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-08-20).")

@dp.message(Form.waiting_for_reminder_time)
async def set_reminder_text(message: types.Message, state: FSMContext):
    try:
        time_str = message.text.strip()
        time = datetime.strptime(time_str, "%H:%M").time()
        
        data = await state.get_data()
        date = data['reminder_date']
        
        dt = datetime.combine(date, time)
        dt = UZBEK_TZ.localize(dt)
        
        if dt < datetime.now(UZBEK_TZ):
            await message.answer("–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è. –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è:")
            return
            
        await state.update_data(reminder_datetime=dt)
        await message.answer("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        await state.set_state(Form.waiting_for_reminder_text)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30).")

@dp.message(Form.waiting_for_reminder_text)
async def save_reminder(message: types.Message, state: FSMContext):
    global next_reminder_id
    
    data = await state.get_data()
    dt = data['reminder_datetime']
    
    reminder = {
        "id": next_reminder_id,
        "user_id": message.from_user.id,
        "datetime": dt,
        "text": message.text
    }
    
    reminders.append(reminder)
    next_reminder_id += 1

    edit_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{reminder['id']}")]
    ])

    await message.answer(
        f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞ {dt.strftime('%d.%m.%Y %H:%M')}:\n{message.text}", 
        reply_markup=main_kb
    )
    await message.answer("–•–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=edit_kb)
    await state.clear()

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
@dp.callback_query(F.data.startswith("edit_"))
async def edit_reminder(query: types.CallbackQuery, state: FSMContext):
    reminder_id = int(query.data.split("_")[1])
    
    reminder = next((r for r in reminders if r["id"] == reminder_id), None)
    
    if not reminder:
        await query.message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ.")
        await query.answer()
        return
        
    if reminder["datetime"] < datetime.now(UZBEK_TZ):
        await query.message.answer("–≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–æ.")
        await query.answer()
        return
        
    await state.update_data(edit_id=reminder_id)
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data="edit_date")],
        [InlineKeyboardButton("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="edit_time")],
        [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_text")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{reminder_id}")]
    ])
    
    await query.message.answer("–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=kb)
    await query.answer()

@dp.callback_query(F.data == "edit_date")
async def edit_date(query: types.CallbackQuery, state: FSMContext):
    await query.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
    await state.set_state(Form.editing_date)
    await query.answer()

@dp.callback_query(F.data == "edit_time")
async def edit_time(query: types.CallbackQuery, state: FSMContext):
    await query.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
    await state.set_state(Form.editing_time)
    await query.answer()

@dp.callback_query(F.data == "edit_text")
async def edit_text(query: types.CallbackQuery, state: FSMContext):
    await query.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
    await state.set_state(Form.editing_text)
    await query.answer()

@dp.callback_query(F.data.startswith("delete_"))
async def delete_reminder(query: types.CallbackQuery):
    reminder_id = int(query.data.split("_")[1])
    
    for i, reminder in enumerate(reminders):
        if reminder["id"] == reminder_id:
            del reminders[i]
            await query.message.answer("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!", reply_markup=main_kb)
            await query.answer()
            return
            
    await query.message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    await query.answer()

@dp.message(Form.editing_date)
async def save_edited_date(message: types.Message, state: FSMContext):
    try:
        new_date = datetime.strptime(message.text, "%Y-%m-%d").date()
        
        if new_date < datetime.now(UZBEK_TZ).date():
            await message.answer("–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
            return
            
        data = await state.get_data()
        reminder_id = data['edit_id']
        
        for reminder in reminders:
            if reminder["id"] == reminder_id:
                old_dt = reminder["datetime"]
                new_dt = UZBEK_TZ.localize(datetime.combine(new_date, old_dt.time()))
                
                if new_dt < datetime.now(UZBEK_TZ):
                    await message.answer("–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è. –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
                    return
                
                reminder["datetime"] = new_dt
                await message.answer(
                    f"‚úÖ –î–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –ù–æ–≤–æ–µ –≤—Ä–µ–º—è: {new_dt.strftime('%d.%m.%Y %H:%M')}", 
                    reply_markup=main_kb
                )
                break
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ì–ì–ì–ì-–ú–ú-–î–î.")
    await state.clear()

@dp.message(Form.editing_time)
async def save_edited_time(message: types.Message, state: FSMContext):
    try:
        new_time = datetime.strptime(message.text, "%H:%M").time()
        data = await state.get_data()
        reminder_id = data['edit_id']
        
        for reminder in reminders:
            if reminder["id"] == reminder_id:
                old_dt = reminder["datetime"]
                new_dt = UZBEK_TZ.localize(datetime.combine(old_dt.date(), new_time))
                
                if new_dt < datetime.now(UZBEK_TZ):
                    await message.answer("–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è. –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è:")
                    return
                
                reminder["datetime"] = new_dt
                await message.answer(
                    f"‚úÖ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ù–æ–≤–æ–µ –≤—Ä–µ–º—è: {new_dt.strftime('%d.%m.%Y %H:%M')}", 
                    reply_markup=main_kb
                )
                break
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ß–ß:–ú–ú.")
    await state.clear()

@dp.message(Form.editing_text)
async def save_edited_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    reminder_id = data['edit_id']
    
    for reminder in reminders:
        if reminder["id"] == reminder_id:
            reminder["text"] = message.text
            await message.answer(
                f"‚úÖ –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω!\n–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: {message.text}", 
                reply_markup=main_kb
            )
            break
            
    await state.clear()

# --- –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
async def reminder_loop():
    while True:
        now = datetime.now(UZBEK_TZ)
        for reminder in reminders.copy():
            dt, text, user_id = reminder["datetime"], reminder["text"], reminder["user_id"]
            if now >= dt:
                try:
                    await bot.send_message(
                        chat_id=user_id, 
                        text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n{text}"
                    )
                    reminders.remove(reminder)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        await asyncio.sleep(30)

async def main():
    asyncio.create_task(reminder_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())