import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime, timedelta
import pytz
import logging

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –¢–æ–∫–µ–Ω –∏ –≥—Ä—É–ø–ø–∞ ---
TOKEN = "8306438881:AAEFg_MpnXk_iY2zHA5cGJomFv_kVAygbLk"
ADMIN_CHAT_ID = 5612586446  # –ì—Ä—É–ø–ø–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

# --- –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å ---
UZBEK_TZ = pytz.timezone('Asia/Tashkent')

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç")],
        [KeyboardButton(text="üìå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
        [KeyboardButton(text="‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
        [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")]
    ],
    resize_keyboard=True
)

# --- FSM ---
class Form(StatesGroup):
    waiting_for_name = State()
    waiting_for_report = State()
    waiting_for_reminder_text = State()
    waiting_for_reminder_datetime = State()
    editing_reminder_id = State()
    editing_reminder_text = State()

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ ---
user_data = {}  # id -> name
reminders = []  # {"id", "user_id", "datetime", "text"}
next_reminder_id = 1

# --- –°—Ç–∞—Ä—Ç ---
@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:")
    await state.set_state(Form.waiting_for_name)

@dp.message(Form.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    user_data[message.from_user.id] = message.text.strip()
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {message.text}! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç—ã üëá", reply_markup=main_kb)
    await state.clear()

# --- –û—Ç—á–µ—Ç—ã ---
@dp.message(F.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç")
async def send_report(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –æ—Ç—á—ë—Ç (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç):")
    await state.set_state(Form.waiting_for_report)

@dp.message(Form.waiting_for_report, F.content_type.in_({"text", "photo", "document"}))
async def forward_report(message: types.Message, state: FSMContext):
    name = user_data.get(message.from_user.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    try:
        if message.content_type == "text":
            await bot.send_message(ADMIN_CHAT_ID, f"üìã –û—Ç—á–µ—Ç –æ—Ç {name}:\n\n{message.text}")
        elif message.content_type == "photo":
            caption = f"üì∑ –§–æ—Ç–æ-–æ—Ç—á–µ—Ç –æ—Ç {name}"
            if message.caption:
                caption += f"\n\n{message.caption}"
            await bot.send_photo(ADMIN_CHAT_ID, message.photo[-1].file_id, caption=caption)
        elif message.content_type == "document":
            caption = f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç-–æ—Ç—á–µ—Ç –æ—Ç {name}"
            if message.caption:
                caption += f"\n\n{message.caption}"
            await bot.send_document(ADMIN_CHAT_ID, message.document.file_id, caption=caption)
        await message.answer("‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=main_kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞.")
    await state.clear()

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
@dp.message(F.text == "üìå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def set_reminder(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
    await state.set_state(Form.waiting_for_reminder_text)

@dp.message(Form.waiting_for_reminder_text)
async def set_reminder_datetime(message: types.Message, state: FSMContext):
    await state.update_data(reminder_text=message.text)
    await message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-08-20 14:30):")
    await state.set_state(Form.waiting_for_reminder_datetime)

@dp.message(Form.waiting_for_reminder_datetime)
async def save_reminder(message: types.Message, state: FSMContext):
    global next_reminder_id
    try:
        dt = datetime.strptime(message.text.strip(), "%Y-%m-%d %H:%M")
        dt = UZBEK_TZ.localize(dt)
        if dt < datetime.now(UZBEK_TZ):
            await message.answer("–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—à–ª–æ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")
            return
        data = await state.get_data()
        reminder = {
            "id": next_reminder_id,
            "user_id": message.from_user.id,
            "datetime": dt,
            "text": data["reminder_text"]
        }
        reminders.append(reminder)
        next_reminder_id += 1
        await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞ {dt.strftime('%d.%m.%Y %H:%M')}:\n{data['reminder_text']}", reply_markup=main_kb)
        await state.clear()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
@dp.message(F.text == "‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def edit_reminder_start(message: types.Message, state: FSMContext):
    user_reminders = [r for r in reminders if r["user_id"] == message.from_user.id]
    if not user_reminders:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", reply_markup=main_kb)
        return
    text = "–í—ã–±–µ—Ä–∏ ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n" + "\n".join(f"{r['id']}: {r['text']} ({r['datetime'].strftime('%d.%m %H:%M')})" for r in user_reminders)
    await message.answer(text)
    await state.set_state(Form.editing_reminder_id)

@dp.message(Form.editing_reminder_id)
async def edit_reminder_select(message: types.Message, state: FSMContext):
    try:
        rid = int(message.text.strip())
        if not any(r["id"] == rid and r["user_id"] == message.from_user.id for r in reminders):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")
            return
        await state.update_data(edit_id=rid)
        await message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        await state.set_state(Form.editing_reminder_text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")

@dp.message(Form.editing_reminder_text)
async def edit_reminder_save(message: types.Message, state: FSMContext):
    data = await state.get_data()
    rid = data["edit_id"]
    for r in reminders:
        if r["id"] == rid:
            r["text"] = message.text
            await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {rid} –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=main_kb)
            break
    await state.clear()

# --- –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def delete_reminder(message: types.Message):
    user_reminders = [r for r in reminders if r["user_id"] == message.from_user.id]
    if not user_reminders:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", reply_markup=main_kb)
        return
    text = "–í—ã–±–µ—Ä–∏ ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n" + "\n".join(f"{r['id']}: {r['text']} ({r['datetime'].strftime('%d.%m %H:%M')})" for r in user_reminders)
    await message.answer(text)
    # –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äî –≤–≤–æ–¥ ID –∏ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç ID, –±–æ—Ç —É–¥–∞–ª—è–µ—Ç:
    @dp.message()
    async def delete_by_id(msg: types.Message):
        try:
            rid = int(msg.text.strip())
            for r in reminders:
                if r["id"] == rid and r["user_id"] == msg.from_user.id:
                    reminders.remove(r)
                    await msg.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {rid} —É–¥–∞–ª–µ–Ω–æ.", reply_markup=main_kb)
                    return
            await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID.")
        except ValueError:
            await msg.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")

# --- –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
async def reminder_loop():
    while True:
        now = datetime.now(UZBEK_TZ)
        for r in reminders.copy():
            if now >= r["datetime"]:
                try:
                    await bot.send_message(ADMIN_CHAT_ID, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç {user_data.get(r['user_id'], '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}:\n{r['text']}")
                    reminders.remove(r)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        await asyncio.sleep(30)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    asyncio.create_task(reminder_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
