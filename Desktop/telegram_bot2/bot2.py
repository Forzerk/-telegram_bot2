import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# === –¢–û–ö–ï–ù –ò ID –ì–†–£–ü–ü–´ ===
TOKEN = "8306438881:AAEFg_MpnXk_iY2zHA5cGJomFv_kVAygbLk"
ADMIN_CHAT_ID = -4936649070  # –¢–≤–æ–π ID –≥—Ä—É–ø–ø—ã

# === –ë–û–¢ –ò –î–ò–°–ü–ï–¢–ß–ï–† ===
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# === –ö–õ–ê–í–ò–ê–¢–£–†–´ ===
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç")],
        [KeyboardButton(text="üìå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
        [KeyboardButton(text="‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
    ],
    resize_keyboard=True
)

edit_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–∞—Ç–∞", callback_data="edit_date"),
            InlineKeyboardButton(text="–í—Ä–µ–º—è", callback_data="edit_time"),
            InlineKeyboardButton(text="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", callback_data="edit_text"),
        ]
    ]
)

# === FSM ===
class Form(StatesGroup):
    waiting_for_name = State()
    waiting_for_report = State()
    reminder_date = State()
    reminder_time = State()
    reminder_text = State()
    editing_choice = State()
    editing_value = State()

# === –•–†–ê–ù–ò–õ–ò–©–ê ===
user_names = {}  # user_id -> name
reminders = []   # —Å–ø–∏—Å–æ–∫ (datetime, text, user_id)

# === /start ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤:", reply_markup=main_kb)
    await state.set_state(Form.waiting_for_name)

@dp.message(Form.waiting_for_name, F.text)
async def process_name(message: types.Message, state: FSMContext):
    user_names[message.from_user.id] = message.text
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {message.text}! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç—ã –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.", reply_markup=main_kb)
    await state.clear()

# === –û–¢–ü–†–ê–í–ö–ê –û–¢–ß–Å–¢–ê ===
@dp.message(F.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç")
async def send_report(message: types.Message, state: FSMContext):
    if message.from_user.id not in user_names:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –∏–º—è —á–µ—Ä–µ–∑ /start")
        return
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –æ—Ç—á–µ—Ç (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç):")
    await state.set_state(Form.waiting_for_report)

@dp.message(Form.waiting_for_report)
async def forward_report(message: types.Message, state: FSMContext):
    name = user_names.get(message.from_user.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    try:
        if message.content_type == "text":
            await bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"üìã –û—Ç—á–µ—Ç –æ—Ç {name}:\n\n{message.text}"
            )
        elif message.content_type == "photo":
            caption = f"üì∑ –§–æ—Ç–æ-–æ—Ç—á–µ—Ç –æ—Ç {name}\n{message.caption or ''}"
            await bot.send_photo(
                chat_id=ADMIN_CHAT_ID,
                photo=message.photo[-1].file_id,
                caption=caption
            )
        elif message.content_type == "document":
            caption = f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç-–æ—Ç—á–µ—Ç –æ—Ç {name}\n{message.caption or ''}"
            await bot.send_document(
                chat_id=ADMIN_CHAT_ID,
                document=message.document.file_id,
                caption=caption
            )
        await message.answer("‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=main_kb)
    except Exception as e:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    await state.clear()

# === –£–°–¢–ê–ù–û–í–ö–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ===
@dp.message(F.text == "üìå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def set_reminder(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
    await state.set_state(Form.reminder_date)

@dp.message(Form.reminder_date, F.text)
async def process_date(message: types.Message, state: FSMContext):
    try:
        datetime.strptime(message.text, "%Y-%m-%d")
        await state.update_data(reminder_date=message.text)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:")
        await state.set_state(Form.reminder_time)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: YYYY-MM-DD")

@dp.message(Form.reminder_time, F.text)
async def process_time(message: types.Message, state: FSMContext):
    try:
        datetime.strptime(message.text, "%H:%M")
        await state.update_data(reminder_time=message.text)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        await state.set_state(Form.reminder_text)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: HH:MM")

@dp.message(Form.reminder_text, F.text)
async def process_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    dt_str = f"{data['reminder_date']} {data['reminder_time']}"
    try:
        reminder_dt = datetime.strptime(dt_str, "%Y-%m-%d %H:%M")
        reminders.append((reminder_dt, message.text, message.from_user.id))
        await message.answer(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_dt.strftime('%Y-%m-%d %H:%M')}: {message.text}",
            reply_markup=main_kb
        )
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
    await state.clear()

# === –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ===
@dp.message(F.text == "‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def edit_reminder(message: types.Message, state: FSMContext):
    user_rems = [r for r in reminders if r[2] == message.from_user.id]
    if not user_rems:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    # –í–æ–∑—å–º—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫)
    reminder = user_rems[-1]
    index = reminders.index(reminder)
    await state.update_data(editing_reminder_index=index)
    await message.answer("–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=edit_kb)

@dp.callback_query(F.data.startswith("edit_"))
async def process_edit_choice(callback: types.CallbackQuery, state: FSMContext):
    choice = callback.data.split("_", 1)[1]  # date, time, text
    await state.update_data(edit_choice=choice)
    if choice == "date":
        await callback.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É (YYYY-MM-DD):")
    elif choice == "time":
        await callback.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (HH:MM):")
    elif choice == "text":
        await callback.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
    await state.set_state(Form.editing_value)

@dp.message(Form.editing_value, F.text)
async def save_edited_reminder(message: types.Message, state: FSMContext):
    data = await state.get_data()
    choice = data.get("edit_choice")
    index = data.get("editing_reminder_index")

    if index is None or index >= len(reminders):
        await message.answer("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return

    reminder = reminders[index]
    if reminder[2] != message.from_user.id:
        await message.answer("‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")
        await state.clear()
        return

    try:
        dt, text, user_id = reminder
        if choice == "date":
            new_date = datetime.strptime(message.text, "%Y-%m-%d").date()
            new_dt = datetime.combine(new_date, dt.time())
            reminders[index] = (new_dt, text, user_id)
            display = new_dt
        elif choice == "time":
            new_time = datetime.strptime(message.text, "%H:%M").time()
            new_dt = datetime.combine(dt.date(), new_time)
            reminders[index] = (new_dt, text, user_id)
            display = new_dt
        elif choice == "text":
            reminders[index] = (dt, message.text, user_id)
            display = dt
        else:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
            await state.clear()
            return

        await message.answer(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {display.strftime('%Y-%m-%d %H:%M')} ‚Äî {reminders[index][1]}",
            reply_markup=main_kb
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.")
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    await state.clear()

# === –§–û–ù–û–í–´–ô –¶–ò–ö–õ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ===
async def reminder_loop():
    while True:
        try:
            now = datetime.now()
            for reminder in reminders.copy():
                dt, text, user_id = reminder
                if now >= dt:
                    try:
                        name = user_names.get(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                        await bot.send_message(
                            chat_id=ADMIN_CHAT_ID,
                            text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç {name}: {text}"
                        )
                        reminders.remove(reminder)
                    except Exception as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        await asyncio.sleep(30)

# === –ó–ê–ü–£–°–ö ===
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    asyncio.create_task(reminder_loop())
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
