import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime
import logging
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# === –¢–û–ö–ï–ù –ò ID –ì–†–£–ü–ü–´ ===
TOKEN = "8306438881:AAEFg_MpnXk_iY2zHA5cGJomFv_kVAygbLk"
ADMIN_CHAT_ID = -1002992449853  # –ù–æ–≤—ã–π ID –≥—Ä—É–ø–ø—ã (—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞)

# === –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞ ===
uzbekistan_tz = pytz.timezone("Asia/Tashkent")

# === ID –ê–î–ú–ò–ù–ê(–æ–≤) ===
ADMINS = {5612586446}  # –¢–æ–ª—å–∫–æ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏

# === –ë–û–¢ –ò –î–ò–°–ü–ï–¢–ß–ï–† ===
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# === –ö–õ–ê–í–ò–ê–¢–£–†–´ ===
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
basic_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç")],
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ (–≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏)
admin_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç")],
        [KeyboardButton(text="üìå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
        [KeyboardButton(text="‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
edit_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–∞—Ç–∞", callback_data="edit_date"),
            InlineKeyboardButton(text="–í—Ä–µ–º—è", callback_data="edit_time"),
            InlineKeyboardButton(text="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", callback_data="edit_text"),
        ]
    ]
)

# === FSM ===
class Form(StatesGroup):
    waiting_for_name = State()
    waiting_for_report = State()
    reminder_date = State()
    reminder_time = State()
    reminder_text = State()
    editing_choice = State()
    editing_value = State()

# === –•–†–ê–ù–ò–õ–ò–©–ê ===
user_names = {}  # user_id -> name
reminders = []   # (datetime, text, user_id)

# === /start ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    if message.from_user.id not in user_names:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤:")
        await state.set_state(Form.waiting_for_name)
    else:
        kb = admin_kb if message.from_user.id in ADMINS else basic_kb
        await message.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_names[message.from_user.id]}!", reply_markup=kb)

@dp.message(Form.waiting_for_name, F.text)
async def process_name(message: types.Message, state: FSMContext):
    user_names[message.from_user.id] = message.text
    kb = admin_kb if message.from_user.id in ADMINS else basic_kb
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {message.text}! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç—ã.", reply_markup=kb)
    await state.clear()

# === –û–¢–ü–†–ê–í–ö–ê –û–¢–ß–Å–¢–ê (–≤—Å–µ –º–æ–≥—É—Ç) ===
@dp.message(F.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç")
async def send_report(message: types.Message, state: FSMContext):
    if message.from_user.id not in user_names:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –∏–º—è —á–µ—Ä–µ–∑ /start")
        return
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –æ—Ç—á–µ—Ç (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç):")
    await state.set_state(Form.waiting_for_report)

@dp.message(Form.waiting_for_report)
async def forward_report(message: types.Message, state: FSMContext):
    name = user_names.get(message.from_user.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    try:
        if message.content_type == "text":
            await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"üìã –û—Ç—á–µ—Ç –æ—Ç {name}:\n\n{message.text}")
        elif message.content_type == "photo":
            caption = f"üì∑ –§–æ—Ç–æ-–æ—Ç—á–µ—Ç –æ—Ç {name}\n{message.caption or ''}"
            await bot.send_photo(chat_id=ADMIN_CHAT_ID, photo=message.photo[-1].file_id, caption=caption)
        elif message.content_type == "document":
            caption = f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç-–æ—Ç—á–µ—Ç –æ—Ç {name}\n{message.caption or ''}"
            await bot.send_document(chat_id=ADMIN_CHAT_ID, document=message.document.file_id, caption=caption)
        kb = admin_kb if message.from_user.id in ADMINS else basic_kb
        await message.answer("‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=kb)
    except Exception as e:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç.")
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    await state.clear()

# === –£–°–¢–ê–ù–û–í–ö–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω) ===
@dp.message(F.text == "üìå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def set_reminder(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    await message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
    await state.set_state(Form.reminder_date)

@dp.message(Form.reminder_date, F.text)
async def process_date(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await state.clear()
        return
    try:
        datetime.strptime(message.text, "%Y-%m-%d")
        await state.update_data(reminder_date=message.text)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:")
        await state.set_state(Form.reminder_time)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: 2025-04-06")

@dp.message(Form.reminder_time, F.text)
async def process_time(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await state.clear()
        return
    try:
        datetime.strptime(message.text, "%H:%M")
        await state.update_data(reminder_time=message.text)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        await state.set_state(Form.reminder_text)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: 14:30")

@dp.message(Form.reminder_text, F.text)
async def process_text(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await state.clear()
        return
    data = await state.get_data()
    dt_str = f"{data['reminder_date']} {data['reminder_time']}"
    try:
        naive_dt = datetime.strptime(dt_str, "%Y-%m-%d %H:%M")
        reminder_dt = uzbekistan_tz.localize(naive_dt)
        reminders.append((reminder_dt, message.text, message.from_user.id))
        await message.answer(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_dt.strftime('%d.%m.%Y –≤ %H:%M')}:\n{message.text}",
            reply_markup=admin_kb
        )
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
    await state.clear()

# === –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω) ===
@dp.message(F.text == "‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def edit_reminder(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    user_rems = [r for r in reminders if r[2] == message.from_user.id]
    if not user_rems:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    reminder = user_rems[-1]
    index = reminders.index(reminder)
    await state.update_data(editing_reminder_index=index)
    await message.answer("–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=edit_kb)

@dp.callback_query(F.data.startswith("edit_"))
async def process_edit_choice(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMINS:
        await callback.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    choice = callback.data.split("_", 1)[1]
    await state.update_data(edit_choice=choice)
    if choice == "date":
        await callback.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É (YYYY-MM-DD):")
    elif choice == "time":
        await callback.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (HH:MM):")
    elif choice == "text":
        await callback.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
    await state.set_state(Form.editing_value)

@dp.message(Form.editing_value, F.text)
async def save_edited_reminder(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await state.clear()
        return
    data = await state.get_data()
    choice = data.get("edit_choice")
    index = data.get("editing_reminder_index")
    if index is None or index >= len(reminders):
        await message.answer("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return
    reminder = reminders[index]
    if reminder[2] != message.from_user.id:
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ —Ç–≤–æ—ë –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")
        await state.clear()
        return
    try:
        dt, text, user_id = reminder
        if choice == "date":
            new_date = datetime.strptime(message.text, "%Y-%m-%d").date()
            new_dt = uzbekistan_tz.localize(datetime.combine(new_date, dt.time()))
            reminders[index] = (new_dt, text, user_id)
        elif choice == "time":
            new_time = datetime.strptime(message.text, "%H:%M").time()
            new_dt = uzbekistan_tz.localize(datetime.combine(dt.date(), new_time))
            reminders[index] = (new_dt, text, user_id)
        elif choice == "text":
            reminders[index] = (dt, message.text, user_id)
        else:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
            await state.clear()
            return
        new_dt = reminders[index][0]
        await message.answer(
            f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {new_dt.strftime('%d.%m.%Y –≤ %H:%M')} ‚Äî {reminders[index][1]}",
            reply_markup=admin_kb
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞.")
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
    await state.clear()

# === –§–û–ù–û–í–´–ô –¶–ò–ö–õ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô (–±–µ–∑ –∏–º–µ–Ω–∏) ===
async def reminder_loop():
    print("‚úÖ –¶–∏–∫–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω (Tashkent)")
    while True:
        try:
            now = datetime.now(uzbekistan_tz)
            for reminder in reminders.copy():
                dt, text, user_id = reminder
                if now >= dt:
                    try:
                        await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"‚è∞ {text}")
                        reminders.remove(reminder)
                        print(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
        await asyncio.sleep(10)

# === –ó–ê–ü–£–°–ö ===
async def main():
    asyncio.create_task(reminder_loop())
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())