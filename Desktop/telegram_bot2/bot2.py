import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime, date, time

TOKEN = "8306438881:AAEFg_MpnXk_iY2zHA5cGJomFv_kVAygbLk"
ADMIN_CHAT_ID = 5612586446  # –ì—Ä—É–ø–ø–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç")],
        [KeyboardButton(text="üìå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
        [KeyboardButton(text="‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
        [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
    ],
    resize_keyboard=True
)

# FSM –¥–ª—è –∏–º–µ–Ω–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
class Form(StatesGroup):
    waiting_for_name = State()
    waiting_for_report = State()
    waiting_for_reminder_date = State()
    waiting_for_reminder_time = State()
    waiting_for_reminder_text = State()
    editing_choice = State()
    editing_value = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {user_id: {"date": date, "time": time, "text": str, "name": str}}
current_reminder = {}

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
ALLOWED_USERS = [123456789, 987654321]  # –≤—Å—Ç–∞–≤—å —Ä–µ–∞–ª—å–Ω—ã–µ Telegram ID

# --- –°—Ç–∞—Ä—Ç –∏ –∏–º—è ---
@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç!\n–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç—á—ë—Ç–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:")
    await state.set_state(Form.waiting_for_name)

@dp.message(Form.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {message.text}! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç—ã üëá", reply_markup=main_kb)
    await state.clear()

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ ---
@dp.message(F.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç")
async def send_report(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –æ—Ç—á—ë—Ç –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞, –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ —Ñ–æ—Ç–æ:")
    await state.set_state(Form.waiting_for_report)

@dp.message(Form.waiting_for_report, F.content_type.in_({"text", "photo", "document"}))
async def forward_report(message: types.Message, state: FSMContext):
    data = await state.get_data()
    name = data.get("name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    if message.content_type == "text":
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"–û—Ç: {name}\n\n{message.text}")
    elif message.content_type == "photo":
        await bot.send_photo(chat_id=ADMIN_CHAT_ID, photo=message.photo[-1].file_id,
                             caption=f"–û—Ç: {name}\n\n{message.caption or ''}")
    elif message.content_type == "document":
        await bot.send_document(chat_id=ADMIN_CHAT_ID, document=message.document.file_id,
                                caption=f"–û—Ç: {name}\n\n{message.caption or ''}")
    await message.answer("–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=main_kb)
    await state.clear()

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
@dp.message(F.text == "üìå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def set_reminder(message: types.Message, state: FSMContext):
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        return
    await message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
    await state.set_state(Form.waiting_for_reminder_date)

@dp.message(Form.waiting_for_reminder_date)
async def reminder_date(message: types.Message, state: FSMContext):
    try:
        dt = datetime.strptime(message.text, "%Y-%m-%d").date()
        current_reminder[message.from_user.id] = {"date": dt, "time": None, "text": None, "name": (await state.get_data()).get("name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")}
        await message.answer("–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:")
        await state.set_state(Form.waiting_for_reminder_time)
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ (YYYY-MM-DD):")

@dp.message(Form.waiting_for_reminder_time)
async def reminder_time(message: types.Message, state: FSMContext):
    try:
        t = datetime.strptime(message.text, "%H:%M").time()
        current_reminder[message.from_user.id]["time"] = t
        await message.answer("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        await state.set_state(Form.waiting_for_reminder_text)
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ (HH:MM):")

@dp.message(Form.waiting_for_reminder_text)
async def reminder_text(message: types.Message, state: FSMContext):
    current_reminder[message.from_user.id]["text"] = message.text
    rem = current_reminder[message.from_user.id]
    full_dt = datetime.combine(rem["date"], rem["time"])
    await message.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {full_dt} ‚Äî {rem['text']}", reply_markup=main_kb)
    await state.clear()

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
edit_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É"), KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è"), KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ")],
        [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
    ],
    resize_keyboard=True
)

@dp.message(F.text == "‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def edit_reminder(message: types.Message, state: FSMContext):
    if message.from_user.id not in current_reminder:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=edit_kb)
    await state.set_state(Form.editing_choice)

@dp.message(Form.editing_choice)
async def choose_edit(message: types.Message, state: FSMContext):
    text = message.text
    if text == "–û—Ç–º–µ–Ω–∞":
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_kb)
        await state.clear()
        return
    await state.update_data(edit_field=text)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {text}:")
    await state.set_state(Form.editing_value)

@dp.message(Form.editing_value)
async def apply_edit(message: types.Message, state: FSMContext):
    field = (await state.get_data()).get("edit_field")
    rem = current_reminder[message.from_user.id]
    try:
        if field == "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É":
            rem["date"] = datetime.strptime(message.text, "%Y-%m-%d").date()
        elif field == "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è":
            rem["time"] = datetime.strptime(message.text, "%H:%M").time()
        elif field == "–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ":
            rem["text"] = message.text
        await message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=main_kb)
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await state.clear()

# --- –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def delete_reminder(message: types.Message):
    if message.from_user.id in current_reminder:
        current_reminder.pop(message.from_user.id)
        await message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.", reply_markup=main_kb)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.", reply_markup=main_kb)

# --- –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
async def reminder_loop():
    while True:
        now = datetime.now()
        for user_id, rem in list(current_reminder.items()):
            full_dt = datetime.combine(rem["date"], rem["time"])
            if now >= full_dt:
                await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç {rem['name']}: {rem['text']}")
                current_reminder.pop(user_id)
        await asyncio.sleep(30)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    asyncio.create_task(reminder_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

