import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta

TOKEN = "8306438881:AAEFg_MpnXk_iY2zHA5cGJomFv_kVAygbLk"
GROUP_ID = -4936649070  # —Ç–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞

bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# FSM –¥–ª—è –∏–º–µ–Ω–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
class Form(StatesGroup):
    name = State()
    reminder_date = State()
    reminder_time = State()
    reminder_text = State()

# /start
@dp.message(commands=["start"])
async def start_command(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç!\n–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç—á—ë—Ç–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:")
    await state.set_state(Form.name)

# –ü—Ä–∏—ë–º –∏–º–µ–Ω–∏
@dp.message(Form.name)
async def process_name(message: types.Message, state: FSMContext):
    user_name = message.text
    await state.update_data(name=user_name)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç")],
            [KeyboardButton(text="‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")]
        ],
        resize_keyboard=True
    )
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {user_name}! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç—ã üëá", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç"
@dp.message(lambda msg: msg.text == "üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç")
async def ask_report(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –æ—Ç—á—ë—Ç –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞, –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ —Ñ–æ—Ç–æ.")

# –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç
@dp.message(lambda msg: msg.text not in ["üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"])
async def handle_report(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_name = data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")

    await bot.send_message(GROUP_ID, f"üì© –û—Ç—á—ë—Ç –æ—Ç {user_name}:\n{message.text}")
    await message.answer("‚úÖ –¢–µ–∫—Å—Ç –ø—Ä–∏–Ω—è—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
@dp.message(lambda msg: msg.text == "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def set_reminder(message: types.Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–µ–≥–æ–¥–Ω—è"), KeyboardButton(text="–ó–∞–≤—Ç—Ä–∞")],
            [KeyboardButton(text="–î—Ä—É–≥–∞—è –¥–∞—Ç–∞")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(Form.reminder_date)

# –î–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.message(Form.reminder_date)
async def process_reminder_date(message: types.Message, state: FSMContext):
    if message.text == "–°–µ–≥–æ–¥–Ω—è":
        date = datetime.now().date()
    elif message.text == "–ó–∞–≤—Ç—Ä–∞":
        date = (datetime.now() + timedelta(days=1)).date()
    else:
        try:
            date = datetime.strptime(message.text, "%Y-%m-%d").date()
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –¥–∞—Ç—É —Ç–∞–∫: YYYY-MM-DD")
            return

    await state.update_data(reminder_date=date)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä 14:30):", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(Form.reminder_time)

# –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.message(Form.reminder_time)
async def process_reminder_time(message: types.Message, state: FSMContext):
    try:
        time = datetime.strptime(message.text, "%H:%M").time()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –≤—Ä–µ–º—è —Ç–∞–∫: HH:MM")
        return

    await state.update_data(reminder_time=time)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
    await state.set_state(Form.reminder_text)

# –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.message(Form.reminder_text)
async def process_reminder_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_name = data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
    date = data["reminder_date"]
    time = data["reminder_time"]
    text = message.text

    reminder_datetime = datetime.combine(date, time)
    scheduler.add_job(
        send_reminder,
        "date",
        run_date=reminder_datetime,
        args=[user_name, text]
    )

    await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {date} {time} ‚Äî {text}")
    await state.clear()

# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
async def send_reminder(user_name, text):
    await bot.send_message(GROUP_ID, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {user_name}: {text}")

# –ó–∞–ø—É—Å–∫
async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

