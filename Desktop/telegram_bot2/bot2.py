import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pytz

# ==========================
API_TOKEN = "8306438881:AAEFg_MpnXk_iY2zHA5cGJomFv_kVAygbLk"
TARGET_CHAT_ID = 5612586446  # —á–∞—Ç, –∫—É–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç—á—ë—Ç—ã –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
# ==========================

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

scheduler = AsyncIOScheduler(timezone=pytz.timezone("Asia/Tashkent"))

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
users = {}      # {user_id: {"name": str}}
reminders = {}  # {user_id: {"day": int, "time": str, "text": str, "job_id": str}}
user_state = {} # —Ö—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è


# --- –ö–ù–û–ü–ö–ò ---
def main_menu():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üìå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="set_reminder"))
    kb.add(InlineKeyboardButton("‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="edit_reminder"))
    kb.add(InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="delete_reminder"))
    kb.add(InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", callback_data="send_report"))
    return kb

def days_menu():
    kb = InlineKeyboardMarkup(row_width=3)
    days = ["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"]
    for i, d in enumerate(days, start=1):
        kb.insert(InlineKeyboardButton(d, callback_data=f"day_{i}"))
    return kb

def times_menu():
    kb = InlineKeyboardMarkup(row_width=4)
    for h in range(9, 23):
        kb.insert(InlineKeyboardButton(f"{h}:00", callback_data=f"time_{h}:00"))
    return kb


# --- –°–¢–ê–†–¢ ---
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    user_state[message.from_user.id] = "waiting_name"
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è:")


# --- –°–û–•–†–ê–ù–ï–ù–ò–ï –ò–ú–ï–ù–ò ---
@dp.message_handler(lambda msg: user_state.get(msg.from_user.id) == "waiting_name")
async def set_name(message: types.Message):
    users[message.from_user.id] = {"name": message.text}
    user_state[message.from_user.id] = None
    await message.answer(
        f"‚úÖ –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {message.text}\n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç—ã –∏–ª–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.",
        reply_markup=main_menu()
    )


# --- –ü–ï–†–ï–°–´–õ–ö–ê –û–¢–ß–Å–¢–û–í ---
@dp.message_handler(content_types=types.ContentTypes.ANY)
async def forward_report(message: types.Message):
    if message.from_user.id not in users:
        await message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –∏–º—è –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    user_name = users[message.from_user.id]["name"]
    caption = f"üë§ –û—Ç—á—ë—Ç –æ—Ç: {user_name}\n\n"

    if message.text:
        await bot.send_message(TARGET_CHAT_ID, f"{caption}{message.text}")
    elif message.photo:
        await bot.send_photo(TARGET_CHAT_ID, message.photo[-1].file_id, caption=caption + (message.caption or ""))
    elif message.document:
        await bot.send_document(TARGET_CHAT_ID, message.document.file_id, caption=caption + (message.caption or ""))
    else:
        await message.forward(TARGET_CHAT_ID)


# --- –£–°–¢–ê–ù–û–í–ö–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ---
@dp.callback_query_handler(lambda c: c.data == "set_reminder")
async def set_reminder(call: types.CallbackQuery):
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=days_menu())
    user_state[call.from_user.id] = "setting_day"
    await call.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("day_"))
async def set_day(call: types.CallbackQuery):
    uid = call.from_user.id
    day_num = int(call.data.split("_")[1])
    if uid not in reminders:
        reminders[uid] = {}
    state = user_state.get(uid)
    if state in ["setting_day", "editing_day"]:
        reminders[uid]["day"] = day_num
        await call.message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=times_menu())
        user_state[uid] = "setting_time" if state == "setting_day" else "editing_time"
    await call.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("time_"))
async def set_time(call: types.CallbackQuery):
    uid = call.from_user.id
    time_str = call.data.split("_")[1]
    state = user_state.get(uid)
    if state in ["setting_time", "editing_time"]:
        reminders[uid]["time"] = time_str
        await call.message.answer("‚úç –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        user_state[uid] = "setting_text" if state == "setting_time" else "editing_text"
    await call.answer()

@dp.message_handler(lambda message: user_state.get(message.from_user.id) in ["setting_text", "editing_text"])
async def set_text(message: types.Message):
    uid = message.from_user.id
    reminders[uid]["text"] = message.text
    state = user_state[uid]
    user_state[uid] = None

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –±—ã–ª–∞
    if "job_id" in reminders[uid]:
        try:
            scheduler.remove_job(reminders[uid]["job_id"])
        except:
            pass

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    hour = int(reminders[uid]["time"].split(":")[0])
    job = scheduler.add_job(send_reminder, "cron",
                            day_of_week=reminders[uid]["day"]-1,
                            hour=hour,
                            minute=0,
                            args=[uid])
    reminders[uid]["job_id"] = job.id

    await message.answer(
        f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' if state=='setting_text' else '–æ–±–Ω–æ–≤–ª–µ–Ω–æ'}:\n"
        f"üìÖ –î–µ–Ω—å: {reminders[uid]['day']}\n‚è∞ –í—Ä–µ–º—è: {reminders[uid]['time']}\nüí¨ –¢–µ–∫—Å—Ç: {reminders[uid]['text']}",
        reply_markup=main_menu()
    )


# --- –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ---
@dp.callback_query_handler(lambda c: c.data == "edit_reminder")
async def edit_reminder(call: types.CallbackQuery):
    uid = call.from_user.id
    if uid not in reminders:
        await call.message.answer("‚ùó –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=days_menu())
    user_state[uid] = "editing_day"
    await call.answer()

# --- –£–î–ê–õ–ï–ù–ò–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ---
@dp.callback_query_handler(lambda c: c.data == "delete_reminder")
async def delete_reminder(call: types.CallbackQuery):
    uid = call.from_user.id
    if uid in reminders:
        try:
            scheduler.remove_job(reminders[uid]["job_id"])
        except:
            pass
        reminders.pop(uid)
        await call.message.answer("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.", reply_markup=main_menu())
    else:
        await call.message.answer("‚ùó –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", reply_markup=main_menu())
    await call.answer()


# --- –û–¢–ü–†–ê–í–ö–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø –í –ì–†–£–ü–ü–£ ---
async def send_reminder(uid):
    if uid in reminders:
        text = reminders[uid]["text"]
        await bot.send_message(TARGET_CHAT_ID, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n{text}")


# --- –ó–ê–ü–£–°–ö ---
if __name__ == "__main__":
    scheduler.start()
    executor.start_polling(dp, skip_updates=True)
