import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime, timedelta

TOKEN = "8306438881:AAEFg_MpnXk_iY2zHA5cGJomFv_kVAygbLk"
ADMIN_CHAT_ID = 5612586446  # –ì—Ä—É–ø–ø–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç")],
        [KeyboardButton(text="üìå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
    ],
    resize_keyboard=True
)

# FSM –¥–ª—è –∏–º–µ–Ω–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
class Form(StatesGroup):
    waiting_for_name = State()
    waiting_for_report = State()
    waiting_for_reminder = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–º–µ–Ω –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–∫–µ
user_names = {}
reminders = []

# –°—Ç–∞—Ä—Ç
@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in user_names:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user_names[user_id]}! –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç—ã üëá", reply_markup=main_kb)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç!\n–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç—á—ë—Ç–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:")
        await state.set_state(Form.waiting_for_name)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏
@dp.message(Form.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_names[user_id] = message.text.strip()
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {user_names[user_id]}! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç—ã üëá", reply_markup=main_kb)
    await state.clear()

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
@dp.message(F.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç")
async def send_report(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –æ—Ç—á—ë—Ç –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞, –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ —Ñ–æ—Ç–æ:")
    await state.set_state(Form.waiting_for_report)

@dp.message(Form.waiting_for_report, F.content_type.in_({"text", "photo", "document"}))
async def forward_report(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = user_names.get(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    if message.content_type == "text":
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"–û—Ç—á–µ—Ç –æ—Ç {name}:\n\n{message.text}")
    elif message.content_type == "photo":
        await bot.send_photo(chat_id=ADMIN_CHAT_ID, photo=message.photo[-1].file_id, caption=f"–û—Ç—á–µ—Ç –æ—Ç {name}\n\n{message.caption or ''}")
    elif message.content_type == "document":
        await bot.send_document(chat_id=ADMIN_CHAT_ID, document=message.document.file_id, caption=f"–û—Ç—á–µ—Ç –æ—Ç {name}\n\n{message.caption or ''}")
    await message.answer("–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=main_kb)
    await state.clear()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.message(F.text == "üìå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def set_reminder(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`YYYY-MM-DD HH:MM –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è`\n–ü—Ä–∏–º–µ—Ä: `2025-08-20 14:30 –°–¥–µ–ª–∞—Ç—å –æ—Ç—á–µ—Ç`")
    await state.set_state(Form.waiting_for_reminder)

@dp.message(Form.waiting_for_reminder, F.text)
async def save_reminder(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = user_names.get(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    try:
        dt_str, text = message.text[:16], message.text[17:]
        dt = datetime.strptime(dt_str, "%Y-%m-%d %H:%M")
        reminders.append((dt, text, name))
        await message.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {dt_str} ‚Äî {text}", reply_markup=main_kb)
        await state.clear()
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:\n`YYYY-MM-DD HH:MM –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è`")

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def reminder_loop():
    while True:
        now = datetime.now()
        for r in reminders.copy():
            dt, text, name = r
            if now >= dt:
                await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç {name}: {text}")
                reminders.remove(r)
        await asyncio.sleep(30)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    asyncio.create_task(reminder_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
