import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime

TOKEN = "8306438881:AAEFg_MpnXk_iY2zHA5cGJomFv_kVAygbLk"
ADMIN_CHAT_ID = 5612586446  # –≥—Ä—É–ø–ø–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç")],
        [KeyboardButton(text="üìå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
        [KeyboardButton(text="‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
    ],
    resize_keyboard=True
)

# FSM
class Form(StatesGroup):
    waiting_for_name = State()
    waiting_for_report = State()
    reminder_date = State()
    reminder_time = State()
    reminder_text = State()
    editing_choice = State()
    editing_value = State()

# --- –•—Ä–∞–Ω–∏–ª–∏—â–∞ ---
user_names = {}  # user_id -> name
reminders = []   # —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (datetime, text, user_id)

# --- Inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
edit_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–∞—Ç–∞", callback_data="edit_date"),
            InlineKeyboardButton(text="–í—Ä–µ–º—è", callback_data="edit_time"),
            InlineKeyboardButton(text="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", callback_data="edit_text"),
        ]
    ]
)

# --- –°—Ç–∞—Ä—Ç ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤:", reply_markup=main_kb)
    await state.set_state(Form.waiting_for_name)

@dp.message(Form.waiting_for_name, F.text)
async def process_name(message: types.Message, state: FSMContext):
    user_names[message.from_user.id] = message.text
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {message.text}! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç—ã –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.", reply_markup=main_kb)
    await state.clear()

# --- –û—Ç—á—ë—Ç—ã ---
@dp.message(F.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç")
async def send_report(message: types.Message, state: FSMContext):
    if message.from_user.id not in user_names:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –∏–º—è —á–µ—Ä–µ–∑ /start")
        return
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –æ—Ç—á–µ—Ç (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç):")
    await state.set_state(Form.waiting_for_report)

@dp.message(Form.waiting_for_report, F.content_type.in_({"text", "photo", "document"}))
async def forward_report(message: types.Message, state: FSMContext):
    name = user_names.get(message.from_user.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    if message.content_type == "text":
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"üìã –û—Ç—á–µ—Ç –æ—Ç {name}:\n\n{message.text}")
    elif message.content_type == "photo":
        await bot.send_photo(chat_id=ADMIN_CHAT_ID, photo=message.photo[-1].file_id, caption=f"üì∑ –§–æ—Ç–æ-–æ—Ç—á–µ—Ç –æ—Ç {name}\n{message.caption or ''}")
    elif message.content_type == "document":
        await bot.send_document(chat_id=ADMIN_CHAT_ID, document=message.document.file_id, caption=f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç-–æ—Ç—á–µ—Ç –æ—Ç {name}\n{message.caption or ''}")
    await message.answer("–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=main_kb)
    await state.clear()

# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
@dp.message(F.text == "üìå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def set_reminder(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
    await state.set_state(Form.reminder_date)

@dp.message(Form.reminder_date, F.text)
async def process_date(message: types.Message, state: FSMContext):
    try:
        datetime.strptime(message.text, "%Y-%m-%d")
        await state.update_data(reminder_date=message.text)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:")
        await state.set_state(Form.reminder_time)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: YYYY-MM-DD")

@dp.message(Form.reminder_time, F.text)
async def process_time(message: types.Message, state: FSMContext):
    try:
        datetime.strptime(message.text, "%H:%M")
        await state.update_data(reminder_time=message.text)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        await state.set_state(Form.reminder_text)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: HH:MM")

@dp.message(Form.reminder_text, F.text)
async def process_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    dt_str = f"{data['reminder_date']} {data['reminder_time']}"
    reminder_dt = datetime.strptime(dt_str, "%Y-%m-%d %H:%M")
    text = message.text
    reminders.append((reminder_dt, text, message.from_user.id))
    await message.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {dt_str}: {text}", reply_markup=main_kb)
    await state.clear()

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
@dp.message(F.text == "‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def edit_reminder(message: types.Message, state: FSMContext):
    user_rems = [r for r in reminders if r[2] == message.from_user.id]
    if not user_rems:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:", reply_markup=edit_kb)

@dp.callback_query(F.data.startswith("edit_"))
async def process_edit_choice(callback: types.CallbackQuery, state: FSMContext):
    choice = callback.data.split("_")[1]
    await state.update_data(edit_choice=choice)
    if choice == "date":
        await callback.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É (YYYY-MM-DD):")
    elif choice == "time":
        await callback.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (HH:MM):")
    elif choice == "text":
        await callback.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
    await state.set_state(Form.editing_value)

@dp.message(Form.editing_value, F.text)
async def save_edited_reminder(message: types.Message, state: FSMContext):
    data = await state.get_data()
    choice = data.get("edit_choice")
    user_rems = [r for r in reminders if r[2] == message.from_user.id]
    if not user_rems:
        await message.answer("–ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        await state.clear()
        return
    reminder = user_rems[-1]  # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ

    try:
        if choice == "date":
            new_date = datetime.strptime(message.text, "%Y-%m-%d").date()
            reminder_dt = reminder[0]
            reminder = (datetime.combine(new_date, reminder_dt.time()), reminder[1], reminder[2])
        elif choice == "time":
            new_time = datetime.strptime(message.text, "%H:%M").time()
            reminder_dt = reminder[0]
            reminder = (datetime.combine(reminder_dt.date(), new_time), reminder[1], reminder[2])
        elif choice == "text":
            reminder = (reminder[0], message.text, reminder[2])
        reminders[-1] = reminder
        await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {reminder[0].strftime('%Y-%m-%d %H:%M')} ‚Äî {reminder[1]}")
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    await state.clear()

# --- –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
async def reminder_loop():
    while True:
        now = datetime.now()
        for r in reminders.copy():
            dt, text, user_id = r
            if now >= dt:
                await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç {user_names.get(user_id,'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}: {text}")
                reminders.remove(r)
        await asyncio.sleep(30)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    asyncio.create_task(reminder_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
