import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime, timedelta
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = "8306438881:AAEFg_MpnXk_iY2zHA5cGJomFv_kVAygbLk"
ADMIN_CHAT_ID = 5612586446  # —Å—é–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç –æ—Ç—á–µ—Ç—ã –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç")],
        [KeyboardButton("üìå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
        [KeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å / –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")]
    ],
    resize_keyboard=True
)

# --- FSM ---
class Form(StatesGroup):
    waiting_for_name = State()
    waiting_for_report = State()
    waiting_for_reminder = State()
    choosing_reminder = State()
    editing_text = State()

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ ---
user_data = {}
reminders = []
next_reminder_id = 1

# --- –°—Ç–∞—Ä—Ç ---
@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:")
    await state.set_state(Form.waiting_for_name)

@dp.message(Form.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    user_data[message.from_user.id] = message.text
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {message.text}! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç—ã üëá", reply_markup=main_kb)
    await state.clear()

# --- –û—Ç—á–µ—Ç—ã ---
@dp.message(F.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç")
async def send_report(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –æ—Ç—á—ë—Ç –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞, –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ —Ñ–æ—Ç–æ:")
    await state.set_state(Form.waiting_for_report)

@dp.message(Form.waiting_for_report, F.content_type.in_({"text", "photo", "document"}))
async def forward_report(message: types.Message, state: FSMContext):
    name = user_data.get(message.from_user.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    if message.content_type == "text":
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"{name} –ø—Ä–∏—Å–ª–∞–ª –æ—Ç—á–µ—Ç:\n\n{message.text}")
    elif message.content_type == "photo":
        await bot.send_photo(chat_id=ADMIN_CHAT_ID, photo=message.photo[-1].file_id, caption=f"{name} –ø—Ä–∏—Å–ª–∞–ª –æ—Ç—á–µ—Ç:\n\n{message.caption}")
    elif message.content_type == "document":
        await bot.send_document(chat_id=ADMIN_CHAT_ID, document=message.document.file_id, caption=f"{name} –ø—Ä–∏—Å–ª–∞–ª –æ—Ç—á–µ—Ç:\n\n{message.caption}")
    await message.answer("–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=main_kb)
    await state.clear()

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
@dp.message(F.text == "üìå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def set_reminder(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`YYYY-MM-DD HH:MM –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è`")
    await state.set_state(Form.waiting_for_reminder)

@dp.message(Form.waiting_for_reminder, F.text)
async def save_reminder(message: types.Message, state: FSMContext):
    global next_reminder_id
    try:
        dt_str, text = message.text[:16], message.text[17:]
        dt = datetime.strptime(dt_str, "%Y-%m-%d %H:%M")
        reminders.append({"id": next_reminder_id, "dt": dt, "text": text, "user_id": message.from_user.id})
        next_reminder_id += 1
        await message.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {dt_str} ‚Äî {text}", reply_markup=main_kb)
        await state.clear()
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:\n`YYYY-MM-DD HH:MM –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è`")

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ / —É–¥–∞–ª–µ–Ω–∏–µ ---
@dp.message(F.text == "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å / –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def edit_reminders(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_reminders = [r for r in reminders if r["user_id"] == user_id]

    if not user_reminders:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", reply_markup=main_kb)
        return

    kb = InlineKeyboardMarkup()
    for r in user_reminders:
        kb.add(
            InlineKeyboardButton(text=f"{r['dt'].strftime('%d.%m %H:%M')} - {r['text'][:15]}...", callback_data=f"edit_{r['id']}"),
            InlineKeyboardButton(text="‚ùå", callback_data=f"delete_{r['id']}")
        )
    await message.answer("–í—ã–±–µ—Ä–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:", reply_markup=kb)
    await state.set_state(Form.choosing_reminder)

@dp.callback_query(lambda c: c.data and c.data.startswith("edit_"))
async def callback_edit_reminder(callback: types.CallbackQuery, state: FSMContext):
    reminder_id = int(callback.data.split("_")[1])
    await state.update_data(editing_reminder_id=reminder_id)
    await callback.message.answer("–ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
    await state.set_state(Form.editing_text)
    await callback.answer()

@dp.callback_query(lambda c: c.data and c.data.startswith("delete_"))
async def callback_delete_reminder(callback: types.CallbackQuery):
    reminder_id = int(callback.data.split("_")[1])
    global reminders
    reminders = [r for r in reminders if r["id"] != reminder_id]
    await callback.message.answer("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
    await callback.answer()

@dp.message(Form.editing_text)
async def save_edited_reminder(message: types.Message, state: FSMContext):
    data = await state.get_data()
    reminder_id = data.get("editing_reminder_id")
    for r in reminders:
        if r["id"] == reminder_id:
            r["text"] = message.text
            await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:\n{r['dt'].strftime('%d.%m.%Y %H:%M')} - {r['text']}", reply_markup=main_kb)
            break
    await state.clear()

# --- –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ---
async def reminder_loop():
    while True:
        now = datetime.now()
        for r in reminders.copy():
            if now >= r["dt"]:
                user_name = user_data.get(r["user_id"], "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç {user_name}: {r['text']}")
                reminders.remove(r)
        await asyncio.sleep(30)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    asyncio.create_task(reminder_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
